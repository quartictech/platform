import io.quartic.gradle.frontend.FrontendPlugin

apply plugin: FrontendPlugin

def env = [BUILD_VERSION: version]

task bundle(type: Exec) {
    inputs.files    installDependencies.outputs
    inputs.file     "${projectDir}/tsconfig.json"
    inputs.dir      "${projectDir}/config"
    inputs.dir      "${projectDir}/src"
    outputs.dir     "${buildDir}/webpack"

    environment  += ["NODE_ENV": "production"]      // TODO: this can probably be handled inside Webpack configuration

    commandLine     "${projectDir}/node_modules/.bin/webpack",
                    "--config", "${projectDir}/config/webpack/prod.ts",
                    "--profile", "--colors"
}

task run(type: Exec) {
    inputs.files    installDependencies.outputs
    inputs.file     "${projectDir}/tsconfig.json"
    inputs.dir      "${projectDir}/config"
    inputs.dir      "${projectDir}/src"
    // No outputs because this should always run

    commandLine     "${projectDir}/node_modules/.bin/ts-node", "${projectDir}/src/server"
}

def createLintTask(def name, def configFile, def pattern, Object... extraArgs) {
    def exec = "${projectDir}/node_modules/.bin/${name}"
    task "${name}"(type: Exec) {
        inputs.files    installDependencies.outputs
        inputs.file     configFile
        inputs.dir      "${projectDir}/src"
        outputs.dir     "${buildDir}/lint"

        commandLine     (
                [exec, "--config", configFile] +
                extraArgs.toList() +
                ["${projectDir}/src/**/${pattern}"]
        )

        onlyIf          { file(exec).exists() }
    }
}

createLintTask("tslint", "${rootDir}/tslint.json", "*.ts{,x}", "-t", "stylish")
createLintTask("eslint", "${rootDir}/eslint.json", "*.js{,x}")
createLintTask("stylelint", "${projectDir}/stylelint.json", "*.css")

task lint {
    dependsOn   tslint, eslint, stylelint
}

check.dependsOn lint

jar {
    from bundle
}
